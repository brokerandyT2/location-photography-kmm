// photographyShared/src/commonMain/kotlin/com/x3squaredcircles/photographyshared/infrastructure/repositories/PhoneCameraProfileRepository.kt
package com.x3squaredcircles.photographyshared.infrastructure.repositories

import com.x3squaredcircles.core.Result
import com.x3squaredcircles.core.infrastructure.services.ILoggingService
import com.x3squaredcircles.photography.domain.entities.PhoneCameraProfile
import com.x3squaredcircles.photographyshared.db.PhotographyDatabase
import kotlinx.coroutines.withContext
import kotlinx.coroutines.Dispatchers

class PhoneCameraProfileRepository(
    private val database: PhotographyDatabase,
    private val logger: ILoggingService
) : IPhoneCameraProfileRepository {

    override suspend fun createAsync(profile: PhoneCameraProfile): Result<PhoneCameraProfile> {
        return try {
            withContext(Dispatchers.IO) {
                database.phoneCameraProfileQueries.insert(
                    phoneModel = profile.phoneModel,
                    mainLensFocalLength = profile.mainLensFocalLength,
                    mainLensFOV = profile.mainLensFOV,
                    ultraWideFocalLength = profile.ultraWideFocalLength,
                    telephotoFocalLength = profile.telephotoFocalLength,
                    dateCalibrated = profile.dateCalibrated,
                    isActive = if (profile.isActive) 1L else 0L
                )

                // Return the profile - ID will be generated by database
                Result.success(profile)
            }
        } catch (e: Exception) {
            logger.logError("Error creating phone camera profile", e)
            Result.failure(e.message ?: "Unknown error creating phone camera profile")
        }
    }

    override suspend fun getActiveProfileAsync(): Result<PhoneCameraProfile> {
        return try {
            withContext(Dispatchers.IO) {
                val entity = database.phoneCameraProfileQueries.selectActive().executeAsOneOrNull()
                if (entity != null) {
                    val profile = PhoneCameraProfile(
                        id = entity.id.toInt(),
                        phoneModel = entity.phoneModel,
                        mainLensFocalLength = entity.mainLensFocalLength,
                        mainLensFOV = entity.mainLensFOV,
                        ultraWideFocalLength = entity.ultraWideFocalLength,
                        telephotoFocalLength = entity.telephotoFocalLength,
                        dateCalibrated = entity.dateCalibrated,
                        isActive = entity.isActive == 1L
                    )
                    Result.success(profile)
                } else {
                    Result.failure("No active phone camera profile found")
                }
            }
        } catch (e: Exception) {
            logger.logError("Error getting active phone camera profile", e)
            Result.failure(e.message ?: "Unknown error getting active phone camera profile")
        }
    }

    override suspend fun getByIdAsync(id: Int): Result<PhoneCameraProfile> {
        return try {
            withContext(Dispatchers.IO) {
                val entity = database.phoneCameraProfileQueries.selectById(id.toLong()).executeAsOneOrNull()
                if (entity != null) {
                    val profile = PhoneCameraProfile(
                        id = entity.id.toInt(),
                        phoneModel = entity.phoneModel,
                        mainLensFocalLength = entity.mainLensFocalLength,
                        mainLensFOV = entity.mainLensFOV,
                        ultraWideFocalLength = entity.ultraWideFocalLength,
                        telephotoFocalLength = entity.telephotoFocalLength,
                        dateCalibrated = entity.dateCalibrated,
                        isActive = entity.isActive == 1L
                    )
                    Result.success(profile)
                } else {
                    Result.failure("Phone camera profile not found")
                }
            }
        } catch (e: Exception) {
            logger.logError("Error getting phone camera profile by ID: $id", e)
            Result.failure(e.message ?: "Unknown error getting phone camera profile")
        }
    }

    override suspend fun getAllAsync(): Result<List<PhoneCameraProfile>> {
        return try {
            withContext(Dispatchers.IO) {
                val entities = database.phoneCameraProfileQueries.selectAll().executeAsList()
                val profiles = entities.map { entity ->
                    PhoneCameraProfile(
                        id = entity.id.toInt(),
                        phoneModel = entity.phoneModel,
                        mainLensFocalLength = entity.mainLensFocalLength,
                        mainLensFOV = entity.mainLensFOV,
                        ultraWideFocalLength = entity.ultraWideFocalLength,
                        telephotoFocalLength = entity.telephotoFocalLength,
                        dateCalibrated = entity.dateCalibrated,
                        isActive = entity.isActive == 1L
                    )
                }
                Result.success(profiles)
            }
        } catch (e: Exception) {
            logger.logError("Error getting all phone camera profiles", e)
            Result.failure(e.message ?: "Unknown error getting phone camera profiles")
        }
    }

    override suspend fun updateAsync(profile: PhoneCameraProfile): Result<PhoneCameraProfile> {
        return try {
            withContext(Dispatchers.IO) {
                database.phoneCameraProfileQueries.update(
                    phoneModel = profile.phoneModel,
                    mainLensFocalLength = profile.mainLensFocalLength,
                    mainLensFOV = profile.mainLensFOV,
                    ultraWideFocalLength = profile.ultraWideFocalLength,
                    telephotoFocalLength = profile.telephotoFocalLength,
                    dateCalibrated = profile.dateCalibrated,
                    isActive = if (profile.isActive) 1L else 0L,
                    id = profile.id.toLong()
                )

                Result.success(profile)
            }
        } catch (e: Exception) {
            logger.logError("Error updating phone camera profile", e)
            Result.failure(e.message ?: "Unknown error updating phone camera profile")
        }
    }

    override suspend fun deleteAsync(id: Int): Result<Boolean> {
        return try {
            withContext(Dispatchers.IO) {
                database.phoneCameraProfileQueries.deleteById(id.toLong())
                Result.success(true)
            }
        } catch (e: Exception) {
            logger.logError("Error deleting phone camera profile: $id", e)
            Result.failure(e.message ?: "Unknown error deleting phone camera profile")
        }
    }

    override suspend fun setActiveProfileAsync(profileId: Int): Result<Boolean> {
        return try {
            withContext(Dispatchers.IO) {
                database.transaction {
                    // First deactivate all profiles
                    database.phoneCameraProfileQueries.deactivateAllProfiles()

                    // Then activate the specified profile
                    database.phoneCameraProfileQueries.setActiveProfile(profileId.toLong())
                }

                Result.success(true)
            }
        } catch (e: Exception) {
            logger.logError("Error setting active phone camera profile: $profileId", e)
            Result.failure(e.message ?: "Unknown error setting active phone camera profile")
        }
    }

    override suspend fun getByPhoneModelAsync(phoneModel: String): Result<List<PhoneCameraProfile>> {
        return try {
            withContext(Dispatchers.IO) {
                val entities = database.phoneCameraProfileQueries.selectByPhoneModel(phoneModel).executeAsList()
                val profiles = entities.map { entity ->
                    PhoneCameraProfile(
                        id = entity.id.toInt(),
                        phoneModel = entity.phoneModel,
                        mainLensFocalLength = entity.mainLensFocalLength,
                        mainLensFOV = entity.mainLensFOV,
                        ultraWideFocalLength = entity.ultraWideFocalLength,
                        telephotoFocalLength = entity.telephotoFocalLength,
                        dateCalibrated = entity.dateCalibrated,
                        isActive = entity.isActive == 1L
                    )
                }
                Result.success(profiles)
            }
        } catch (e: Exception) {
            logger.logError("Error getting phone camera profiles by model: $phoneModel", e)
            Result.failure(e.message ?: "Unknown error getting phone camera profiles by model")
        }
    }
}